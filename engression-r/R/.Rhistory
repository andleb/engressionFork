n = 1000
p = 5
X = matrix(rnorm(n*p),ncol=p)
Y = (X[,1]+rnorm(n)*0.1)^2 + (X[,2]+rnorm(n)*0.1) + rnorm(n)*0.1
Xtest = matrix(rnorm(n*p),ncol=p)
Ytest = (Xtest[,1]+rnorm(n)*0.1)^2 + (Xtest[,2]+rnorm(n)*0.1) + rnorm(n)*0.1
## fit engression object
engr = engression(X,Y)
engression <- function(X,Y,  noise_dim=5, hidden_dim=100, num_layer=3, dropout=0.05, num_epochs=1000,lr=10^(-3),beta=1, silent=FALSE, standardize=TRUE){
if (is.data.frame(X)) {
if (any(sapply(X, is.factor)))   warning("Data frame contains factor variables. Mapping to numeric values. Dummy variables would need to be created explicitly by the user.")
X = dftomat(X)
}
if (is.vector(X) && is.numeric(X)) X <- matrix(X, ncol = 1)
if(is.vector(Y)) Y= matrix(Y, ncol=1)
for (k in 1:ncol(Y)) Y[,k] = as.numeric(Y[,k])
if(dropout<=0 & noise_dim==0){
warning("dropout and noise_dim cannot both be equal to 0 as model needs to be stochastic. setting dropout to 0.5")
dropout = 0.5
}
muX = apply(X,2,mean)
sddX = apply(X,2,sd)
if(any(sddX<=0)){
warning("predictor variable(s) ", colnames(X)[which(sddX<=0)]," are constant on training data -- results might be unreliable")
sddX = pmax(sddX, 10^(03))
}
muY = apply(Y,2,mean)
sddY = apply(Y,2,sd)
if(any(sddY<=0)){
warning("target variable(s) ", colnames(Y)[which(sddY<=0)]," are constant on training data -- results might be unreliable")
}
if(standardize){
X  = sweep(sweep(X,2,muX,FUN="-"),2,sddX,FUN="/")
Y = sweep(sweep(Y,2,muY,FUN="-"),2,sddY,FUN="/")
}
eng = engressionfit(X,Y, noise_dim=noise_dim,hidden_dim=hidden_dim,num_layer=num_layer,dropout=dropout, num_epochs=num_epochs,lr=lr,beta=beta, silent=silent)
engressor = list(engressor = eng$engressor, lossvec= eng$lossvec,  muX=muX, sddX=sddX,muY=muY, sddY=sddY, standardize=standardize, noise_dim=noise_dim,hidden_dim=hidden_dim,num_layer=num_layer,dropout=dropout, num_epochs=num_epochs,lr=lr)
class(engressor) = "engression"
return(engressor)
}
